{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":["file:///Users/adamadlin/Desktop/PRODUCTION_GRADE_AI_PROJECT/frontend/src/app/page.tsx"],"sourcesContent":["\n\n\n\n// 'use client'\n\n// import { useEffect, useRef, useState } from 'react'\n// import { api } from '@/lib/api'\n// import Spinner from '@/components/Spinner'\n// import ChatBubble from '@/components/ChatBubble'\n// import ReactMarkdown from 'react-markdown'\n// import remarkGfm from 'remark-gfm'\n\n// type Msg = { id: string; role: 'user'|'assistant'; content: string }\n\n// export default function Home() {\n//   const [health, setHealth] = useState<string>('')\n//   const [busy, setBusy] = useState<boolean>(false)\n\n//   // Mode: search vs summarize\n//   const [mode, setMode] = useState<'search'|'summarize'>('summarize')\n\n//   // Model params (summarize only)\n//   const [model, setModel] = useState('llama3:8b')\n//   const [k, setK] = useState(8)\n//   const [temperature, setTemperature] = useState(0.1)\n//   const [maxTokens, setMaxTokens] = useState(500)\n\n//   // Ingest panel state\n//   const [urls, setUrls] = useState('https://www.iana.org/domains/reserved')\n//   const [tokens, setTokens] = useState(500)\n//   const [overlap, setOverlap] = useState(100)\n//   const [force, setForce] = useState(false)\n//   const [ingestOut, setIngestOut] = useState<any>(null)\n//   const [ingestBusy, setIngestBusy] = useState(false)\n\n//   const [messages, setMessages] = useState<Msg[]>([])\n//   const [input, setInput] = useState('emperor')\n//   const scroller = useRef<HTMLDivElement>(null)\n\n//   useEffect(() => {\n//     (async () => {\n//       try {\n//         const h = await api.health()\n//         setHealth(`OK (${h.env}, model: ${h.model})`)\n//       } catch (e:any) {\n//         setHealth(`Error: ${e.message}`)\n//       }\n//     })()\n//   }, [])\n\n//   useEffect(() => {\n//     scroller.current?.scrollTo({ top: scroller.current.scrollHeight, behavior: 'smooth' })\n//   }, [messages])\n\n//   async function onSend(e?: React.FormEvent) {\n//     e?.preventDefault()\n//     if (!input.trim() || busy) return\n\n//     const text = input.trim()\n//     setMessages(m => [...m, { id: crypto.randomUUID(), role: 'user', content: text }])\n//     setInput('')\n//     setBusy(true)\n\n//     try {\n//       if (mode === 'summarize') {\n//         const res = await api.summarize(text, { k, model, temperature, max_tokens: maxTokens })\n//         setMessages(m => [...m, { id: crypto.randomUUID(), role: 'assistant', content: `**Summary** *(model: ${res.model})*\\n\\n${res.summary}` }])\n//       } else {\n//         const res = await api.search(text, 5)\n//         const md = [\n//           `**Search Results for:** ${res.query}`,\n//           ...res.results.map((r, i) => {\n//             // r.citation: \"(URL:start-end)\" → extract URL\n//             const url = r.citation?.match(/\\((.+?):\\d+-\\d+\\)/)?.[1] ?? r?.meta?.source ?? '#'\n//             return `**${i+1}.** ${r.text}\\n\\n> [${r.citation}](${url})`\n//           })\n//         ].join('\\n\\n')\n//         setMessages(m => [...m, { id: crypto.randomUUID(), role: 'assistant', content: md }])\n//       }\n//     } catch (e:any) {\n//       setMessages(m => [...m, { id: crypto.randomUUID(), role: 'assistant', content: `❌ ${e.message}` }])\n//     } finally {\n//       setBusy(false)\n//     }\n//   }\n\n//   async function runIngest() {\n//     setIngestBusy(true); setIngestOut(null)\n//     try {\n//       const list = urls.split('\\n').map(s=>s.trim()).filter(Boolean)\n//       const res = await api.ingest(list, tokens, overlap, force)\n//       setIngestOut(res)\n//     } catch (e:any) {\n//       setIngestOut({ error: e.message })\n//     } finally {\n//       setIngestBusy(false)\n//     }\n//   }\n\n//   return (\n//     <div className=\"min-h-screen bg-slate-950 text-slate-100\">\n//       <header className=\"sticky top-0 z-10 border-b border-slate-800 bg-slate-950/80 backdrop-blur-md\">\n//         <div className=\"max-w-5xl mx-auto px-4 py-3 flex items-center justify-between\">\n//           <div>\n//             <div className=\"font-bold\">Production-Grade AI — RAG (Next.js)</div>\n//             <div className=\"text-xs text-slate-400\">\n//               API: {process.env.NEXT_PUBLIC_API_BASE} • Health: <span className=\"text-emerald-400\">{health}</span>\n//             </div>\n//           </div>\n//           <div className=\"hidden md:flex items-center gap-3\">\n//             <div className=\"flex items-center bg-slate-900 border border-slate-700 rounded-lg overflow-hidden\">\n//               <button\n//                 className={`px-3 py-1 text-sm ${mode==='search'?'bg-slate-800':''}`}\n//                 onClick={()=>setMode('search')}\n//                 disabled={busy}\n//               >Search</button>\n//               <button\n//                 className={`px-3 py-1 text-sm ${mode==='summarize'?'bg-slate-800':''}`}\n//                 onClick={()=>setMode('summarize')}\n//                 disabled={busy}\n//               >Summarize</button>\n//             </div>\n\n//             {/* Summarize-only controls */}\n//             {mode==='summarize' && (\n//               <>\n//                 <select className=\"bg-slate-900 border border-slate-700 rounded-lg px-2 py-1\" value={model} onChange={e=>setModel(e.target.value)}>\n//                   <option>llama3:8b</option>\n//                   <option>qwen2.5:3b-instruct</option>\n//                 </select>\n//                 <label className=\"text-xs\">k <input className=\"w-14 ml-1 bg-slate-900 border border-slate-700 rounded px-2 py-1\" type=\"number\" value={k} onChange={e=>setK(Number(e.target.value))}/></label>\n//                 <label className=\"text-xs\">temp <input className=\"w-20 ml-1 bg-slate-900 border border-slate-700 rounded px-2 py-1\" type=\"number\" step={0.1} min={0} max={1} value={temperature} onChange={e=>setTemperature(Number(e.target.value))}/></label>\n//                 <label className=\"text-xs\">max <input className=\"w-20 ml-1 bg-slate-900 border border-slate-700 rounded px-2 py-1\" type=\"number\" value={maxTokens} onChange={e=>setMaxTokens(Number(e.target.value))}/></label>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       </header>\n\n//       <main className=\"max-w-5xl mx-auto px-4\">\n//         <div className=\"mt-4 text-sm text-slate-400\">\n//           {mode==='summarize'\n//             ? 'Type a topic to generate a cited summary from your indexed sources.'\n//             : 'Type a query to search semantically across your indexed sources.'}\n//         </div>\n\n//         <div ref={scroller} className=\"mt-3 h-[62vh] md:h-[66vh] overflow-y-auto space-y-3 pr-1\">\n//           {messages.length === 0 && (\n//             <div className=\"text-slate-400 text-sm\">\n//               Try <code>emperor</code>, <code>roman army tactics</code>, or switch to <b>Search</b> mode and enter keywords.\n//             </div>\n//           )}\n//           {messages.map(m => (\n//             <ChatBubble key={m.id} role={m.role}>\n//               <ReactMarkdown remarkPlugins={[remarkGfm]}>{m.content}</ReactMarkdown>\n//             </ChatBubble>\n//           ))}\n//           {busy && <div className=\"text-slate-400 text-sm flex items-center gap-2\"><Spinner/> Working…</div>}\n//         </div>\n\n//         <form onSubmit={onSend} className=\"sticky bottom-4 mt-4 bg-slate-900/70 border border-slate-800 rounded-2xl p-2 flex items-center gap-2\">\n//           <input\n//             className=\"flex-1 bg-transparent outline-none px-3 py-2\"\n//             placeholder={mode==='summarize' ? \"Type a topic to summarize…\" : \"Type a query to search…\"}\n//             value={input}\n//             onChange={e=>setInput(e.target.value)}\n//           />\n//           <button className=\"bg-blue-600 hover:bg-blue-500 active:bg-blue-700 rounded-xl px-4 py-2\" disabled={busy}>\n//             {busy ? '...' : (mode==='summarize' ? 'Summarize' : 'Search')}\n//           </button>\n//         </form>\n\n//         <section className=\"mt-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\n//           <IngestCard\n//             urls={urls} setUrls={setUrls}\n//             tokens={tokens} setTokens={setTokens}\n//             overlap={overlap} setOverlap={setOverlap}\n//             force={force} setForce={setForce}\n//             runIngest={runIngest}\n//             out={ingestOut} busy={ingestBusy}\n//           />\n//           <ExamplesCard onPick={(q) => setInput(q)} />\n//         </section>\n//       </main>\n//     </div>\n//   )\n// }\n\n// function IngestCard(props: {\n//   urls: string; setUrls: (v:string)=>void;\n//   tokens: number; setTokens: (n:number)=>void;\n//   overlap: number; setOverlap: (n:number)=>void;\n//   force: boolean; setForce: (b:boolean)=>void;\n//   runIngest: () => void;\n//   out: any; busy: boolean;\n// }) {\n//   const { urls, setUrls, tokens, setTokens, overlap, setOverlap, force, setForce, runIngest, out, busy } = props\n//   return (\n//     <div className=\"bg-slate-900 border border-slate-800 rounded-2xl p-4\">\n//       <div className=\"font-semibold mb-2\">Ingest URLs</div>\n//       <textarea className=\"w-full bg-slate-950 border border-slate-800 rounded-lg p-2 h-24\" value={urls} onChange={e=>setUrls(e.target.value)} />\n//       <div className=\"flex flex-wrap gap-2 items-center mt-2 text-sm\">\n//         <label>tokens <input className=\"w-20 bg-slate-950 border border-slate-800 rounded px-2 py-1 ml-1\" type=\"number\" value={tokens} onChange={e=>setTokens(Number(e.target.value))}/></label>\n//         <label>overlap <input className=\"w-20 bg-slate-950 border border-slate-800 rounded px-2 py-1 ml-1\" type=\"number\" value={overlap} onChange={e=>setOverlap(Number(e.target.value))}/></label>\n//         <label className='flex items-center gap-2'><input type=\"checkbox\" checked={force} onChange={e=>setForce(e.target.checked)} /> force</label>\n//         <button onClick={runIngest} className=\"bg-emerald-600 hover:bg-emerald-500 rounded-lg px-3 py-1.5\" disabled={busy}>{busy?'…':'Ingest'}</button>\n//       </div>\n//       {out && <pre className=\"mt-3 text-xs bg-slate-950 border border-slate-800 rounded-lg p-2 whitespace-pre-wrap\">{JSON.stringify(out, null, 2)}</pre>}\n//     </div>\n//   )\n// }\n\n// function ExamplesCard({ onPick }: { onPick: (q: string) => void }) {\n//   const items = [\n//     'emperor',\n//     'roman army tactics',\n//     'history of microsoft',\n//     'Byzantine emperors',\n//   ]\n//   return (\n//     <div className=\"bg-slate-900 border border-slate-800 rounded-2xl p-4\">\n//       <div className=\"font-semibold mb-2\">Examples</div>\n//       <div className=\"grid grid-cols-2 gap-2 text-sm\">\n//         {items.map(x => (\n//           <button key={x} className=\"bg-slate-800 hover:bg-slate-700 rounded-lg px-3 py-2 text-left\" onClick={()=>onPick(x)}>{x}</button>\n//         ))}\n//       </div>\n//     </div>\n//   )\n// }"],"names":[],"mappings":"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","debugId":null}}]
}