{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/adamadlin/Desktop/PRODUCTION_GRADE_AI_PROJECT/frontend/src/lib/api.ts"],"sourcesContent":["\n\n\n// // frontend/src/lib/api.ts\n// const BASE = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:8000';\n\n// async function jfetch<T>(path: string, init?: RequestInit): Promise<T> {\n//   const url = path.startsWith('http') ? path : `${BASE}${path}`;\n//   const res = await fetch(url, {\n//     ...init,\n//     headers: {\n//       'Content-Type': 'application/json',\n//       ...(init?.headers || {}),\n//     },\n//   });\n//   if (!res.ok) {\n//     const text = await res.text().catch(() => '');\n//     throw new Error(text || `HTTP ${res.status}`);\n//   }\n//   return res.json() as Promise<T>;\n// }\n\n// type HealthResp = { ok: boolean; env: string; model: string };\n// type SearchResp = {\n//   query: string;\n//   results: Array<{\n//     text: string;\n//     meta?: { source?: string; start?: number; end?: number };\n//     citation?: string; // \"(URL:start-end)\"\n//   }>;\n// };\n// type SummarizeParams = {\n//   k?: number;\n//   model?: string;\n//   temperature?: number;\n//   max_tokens?: number;\n// };\n// type SummarizeResp = { topic: string; summary: string; used: number; model: string };\n// type IngestResp = {\n//   chunks: number;\n//   indexed: number;\n//   skipped?: number;\n//   json: string;\n//   csv: string;\n//   params: { tokens: number; overlap: number; force?: boolean };\n//   avg_chunk_words: number;\n//   message?: string;\n// };\n// type ExamplesResp = { examples: string[] };\n\n// export const api = {\n//   health: () => jfetch<HealthResp>('/health'),\n//   ingest: (urls: string[], tokens = 1000, overlap = 120, force = false) =>\n//     jfetch<IngestResp>(`/ingest?tokens=${tokens}&overlap=${overlap}&force=${String(force)}`, {\n//       method: 'POST',\n//       body: JSON.stringify(urls),\n//     }),\n//   search: (q: string, k = 5) => jfetch<SearchResp>(`/search?q=${encodeURIComponent(q)}&k=${k}`),\n//   summarize: (topic: string, params: SummarizeParams = {}) => {\n//     const qs = new URLSearchParams({\n//       topic,\n//       k: String(params.k ?? 8),\n//       model: params.model ?? 'llama3:8b',\n//       temperature: String(params.temperature ?? 0.1),\n//       max_tokens: String(params.max_tokens ?? 450),\n//     });\n//     return jfetch<SummarizeResp>(`/summarize?${qs.toString()}`);\n//   },\n//   // 👇 NEW: backend-driven example topics\n//   examples: (n = 6) =>\n//     jfetch<ExamplesResp>(`/examples?${new URLSearchParams({ n: String(n) }).toString()}`),\n// };\n\n\n// frontend/src/lib/api.ts\nconst BASE = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:8000';\n\nasync function jfetch<T>(path: string, init?: RequestInit): Promise<T> {\n  const url = path.startsWith('http') ? path : `${BASE}${path}`;\n  const res = await fetch(url, {\n    ...init,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(init?.headers || {}),\n    },\n  });\n  if (!res.ok) {\n    const text = await res.text().catch(() => '');\n    // Surface Retry-After header if rate-limited:\n    const retry = res.headers.get('Retry-After');\n    const msg = text || `HTTP ${res.status}` + (retry ? ` (Retry-After: ${retry}s)` : '');\n    throw new Error(msg);\n  }\n  return res.json() as Promise<T>;\n}\n\ntype HealthResp = { ok: boolean; env: string; model: string };\ntype SearchResp = {\n  query: string;\n  results: Array<{\n    text: string;\n    meta?: { source?: string; start?: number; end?: number };\n    citation?: string; // \"(URL:start-end)\"\n  }>;\n};\ntype SummarizeParams = {\n  k?: number;\n  model?: string;\n  temperature?: number;\n  max_tokens?: number;\n  source?: string;   // optional backend filter\n  domain?: string;   // optional backend filter\n};\ntype SummarizeResp = { topic: string; summary: string; used: number; model: string };\ntype IngestResp = {\n  chunks: number;\n  indexed: number;\n  skipped?: number;\n  json: string;\n  csv: string;\n  params: { tokens: number; overlap: number; force?: boolean };\n  avg_chunk_words: number;\n  message?: string;\n};\ntype ExamplesResp = { examples: string[] };\n\nexport const api = {\n  health: () => jfetch<HealthResp>('/health'),\n  ingest: (urls: string[], tokens = 1000, overlap = 120, force = false) =>\n    jfetch<IngestResp>(`/ingest?tokens=${tokens}&overlap=${overlap}&force=${String(force)}`, {\n      method: 'POST',\n      body: JSON.stringify(urls),\n    }),\n  search: (q: string, k = 5, opts?: { source?: string; domain?: string }) => {\n    const qs = new URLSearchParams({ q, k: String(k) });\n    if (opts?.source) qs.set('source', opts.source);\n    if (opts?.domain) qs.set('domain', opts.domain);\n    return jfetch<SearchResp>(`/search?${qs.toString()}`);\n  },\n  summarize: (topic: string, params: SummarizeParams = {}) => {\n    const qs = new URLSearchParams({\n      topic,\n      k: String(params.k ?? 8),\n      model: params.model ?? 'llama3:8b',\n      temperature: String(params.temperature ?? 0.1),\n      max_tokens: String(params.max_tokens ?? 450),\n    });\n    if (params.source) qs.set('source', params.source);\n    if (params.domain) qs.set('domain', params.domain);\n    return jfetch<SummarizeResp>(`/summarize?${qs.toString()}`);\n  },\n  examples: (n = 6) => jfetch<ExamplesResp>(`/examples?${new URLSearchParams({ n: String(n) }).toString()}`),\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/adamadlin/Desktop/PRODUCTION_GRADE_AI_PROJECT/frontend/src/components/Spinner.tsx"],"sourcesContent":["export default function Spinner() {\n  return (\n    <span className=\"inline-block h-5 w-5 animate-spin rounded-full border-2 border-white/50 border-t-transparent\"/>\n  );\n}"],"names":[],"mappings":";;;;;;AAAe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;;;;;;AAEpB","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///Users/adamadlin/Desktop/PRODUCTION_GRADE_AI_PROJECT/frontend/src/components/ChatBubble.tsx"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\n\nexport default function ChatBubble({ role, children }: { role: 'user'|'assistant'|'system'; children: React.ReactNode }) {\n  const mine = role === 'user';\n  return (\n    <div className={clsx('w-full flex', mine ? 'justify-end' : 'justify-start')}>\n      <div\n        className={clsx(\n          'max-w-[85%] md:max-w-[70%] rounded-2xl px-4 py-3 text-sm leading-6 whitespace-pre-wrap',\n          mine ? 'bg-blue-600 text-white rounded-br-sm' : 'bg-slate-800 text-slate-100 rounded-bl-sm'\n        )}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}       "],"names":[],"mappings":";;;;;AACA;;;AAEe,SAAS,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAoE;IACrH,MAAM,OAAO,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAW,IAAA,gJAAI,EAAC,eAAe,OAAO,gBAAgB;kBACzD,cAAA,8OAAC;YACC,WAAW,IAAA,gJAAI,EACb,0FACA,OAAO,yCAAyC;sBAGjD;;;;;;;;;;;AAIT","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///Users/adamadlin/Desktop/PRODUCTION_GRADE_AI_PROJECT/frontend/src/app/page.tsx"],"sourcesContent":["\n\n\n\n// 'use client'\n\n// import { useEffect, useRef, useState } from 'react'\n// import { api } from '@/lib/api'\n// import Spinner from '@/components/Spinner'\n// import ChatBubble from '@/components/ChatBubble'\n// import ReactMarkdown from 'react-markdown'\n// import remarkGfm from 'remark-gfm'\n\n// type Msg = { id: string; role: 'user'|'assistant'; content: string }\n\n// export default function Home() {\n//   const [health, setHealth] = useState<string>('')\n//   const [busy, setBusy] = useState<boolean>(false)\n\n//   // Mode: search vs summarize\n//   const [mode, setMode] = useState<'search'|'summarize'>('summarize')\n\n//   // Model params (summarize only)\n//   const [model, setModel] = useState('llama3:8b')\n//   const [k, setK] = useState(8)\n//   const [temperature, setTemperature] = useState(0.1)\n//   const [maxTokens, setMaxTokens] = useState(500)\n\n//   // Ingest panel state\n//   const [urls, setUrls] = useState('https://www.iana.org/domains/reserved')\n//   const [tokens, setTokens] = useState(500)\n//   const [overlap, setOverlap] = useState(100)\n//   const [force, setForce] = useState(false)\n//   const [ingestOut, setIngestOut] = useState<any>(null)\n//   const [ingestBusy, setIngestBusy] = useState(false)\n\n//   const [messages, setMessages] = useState<Msg[]>([])\n//   const [input, setInput] = useState('emperor')\n//   const scroller = useRef<HTMLDivElement>(null)\n\n//   useEffect(() => {\n//     (async () => {\n//       try {\n//         const h = await api.health()\n//         setHealth(`OK (${h.env}, model: ${h.model})`)\n//       } catch (e:any) {\n//         setHealth(`Error: ${e.message}`)\n//       }\n//     })()\n//   }, [])\n\n//   useEffect(() => {\n//     scroller.current?.scrollTo({ top: scroller.current.scrollHeight, behavior: 'smooth' })\n//   }, [messages])\n\n//   async function onSend(e?: React.FormEvent) {\n//     e?.preventDefault()\n//     if (!input.trim() || busy) return\n\n//     const text = input.trim()\n//     setMessages(m => [...m, { id: crypto.randomUUID(), role: 'user', content: text }])\n//     setInput('')\n//     setBusy(true)\n\n//     try {\n//       if (mode === 'summarize') {\n//         const res = await api.summarize(text, { k, model, temperature, max_tokens: maxTokens })\n//         setMessages(m => [...m, { id: crypto.randomUUID(), role: 'assistant', content: `**Summary** *(model: ${res.model})*\\n\\n${res.summary}` }])\n//       } else {\n//         const res = await api.search(text, 5)\n//         const md = [\n//           `**Search Results for:** ${res.query}`,\n//           ...res.results.map((r, i) => {\n//             // r.citation: \"(URL:start-end)\" → extract URL\n//             const url = r.citation?.match(/\\((.+?):\\d+-\\d+\\)/)?.[1] ?? r?.meta?.source ?? '#'\n//             return `**${i+1}.** ${r.text}\\n\\n> [${r.citation}](${url})`\n//           })\n//         ].join('\\n\\n')\n//         setMessages(m => [...m, { id: crypto.randomUUID(), role: 'assistant', content: md }])\n//       }\n//     } catch (e:any) {\n//       setMessages(m => [...m, { id: crypto.randomUUID(), role: 'assistant', content: `❌ ${e.message}` }])\n//     } finally {\n//       setBusy(false)\n//     }\n//   }\n\n//   async function runIngest() {\n//     setIngestBusy(true); setIngestOut(null)\n//     try {\n//       const list = urls.split('\\n').map(s=>s.trim()).filter(Boolean)\n//       const res = await api.ingest(list, tokens, overlap, force)\n//       setIngestOut(res)\n//     } catch (e:any) {\n//       setIngestOut({ error: e.message })\n//     } finally {\n//       setIngestBusy(false)\n//     }\n//   }\n\n//   return (\n//     <div className=\"min-h-screen bg-slate-950 text-slate-100\">\n//       <header className=\"sticky top-0 z-10 border-b border-slate-800 bg-slate-950/80 backdrop-blur-md\">\n//         <div className=\"max-w-5xl mx-auto px-4 py-3 flex items-center justify-between\">\n//           <div>\n//             <div className=\"font-bold\">Production-Grade AI — RAG (Next.js)</div>\n//             <div className=\"text-xs text-slate-400\">\n//               API: {process.env.NEXT_PUBLIC_API_BASE} • Health: <span className=\"text-emerald-400\">{health}</span>\n//             </div>\n//           </div>\n//           <div className=\"hidden md:flex items-center gap-3\">\n//             <div className=\"flex items-center bg-slate-900 border border-slate-700 rounded-lg overflow-hidden\">\n//               <button\n//                 className={`px-3 py-1 text-sm ${mode==='search'?'bg-slate-800':''}`}\n//                 onClick={()=>setMode('search')}\n//                 disabled={busy}\n//               >Search</button>\n//               <button\n//                 className={`px-3 py-1 text-sm ${mode==='summarize'?'bg-slate-800':''}`}\n//                 onClick={()=>setMode('summarize')}\n//                 disabled={busy}\n//               >Summarize</button>\n//             </div>\n\n//             {/* Summarize-only controls */}\n//             {mode==='summarize' && (\n//               <>\n//                 <select className=\"bg-slate-900 border border-slate-700 rounded-lg px-2 py-1\" value={model} onChange={e=>setModel(e.target.value)}>\n//                   <option>llama3:8b</option>\n//                   <option>qwen2.5:3b-instruct</option>\n//                 </select>\n//                 <label className=\"text-xs\">k <input className=\"w-14 ml-1 bg-slate-900 border border-slate-700 rounded px-2 py-1\" type=\"number\" value={k} onChange={e=>setK(Number(e.target.value))}/></label>\n//                 <label className=\"text-xs\">temp <input className=\"w-20 ml-1 bg-slate-900 border border-slate-700 rounded px-2 py-1\" type=\"number\" step={0.1} min={0} max={1} value={temperature} onChange={e=>setTemperature(Number(e.target.value))}/></label>\n//                 <label className=\"text-xs\">max <input className=\"w-20 ml-1 bg-slate-900 border border-slate-700 rounded px-2 py-1\" type=\"number\" value={maxTokens} onChange={e=>setMaxTokens(Number(e.target.value))}/></label>\n//               </>\n//             )}\n//           </div>\n//         </div>\n//       </header>\n\n//       <main className=\"max-w-5xl mx-auto px-4\">\n//         <div className=\"mt-4 text-sm text-slate-400\">\n//           {mode==='summarize'\n//             ? 'Type a topic to generate a cited summary from your indexed sources.'\n//             : 'Type a query to search semantically across your indexed sources.'}\n//         </div>\n\n//         <div ref={scroller} className=\"mt-3 h-[62vh] md:h-[66vh] overflow-y-auto space-y-3 pr-1\">\n//           {messages.length === 0 && (\n//             <div className=\"text-slate-400 text-sm\">\n//               Try <code>emperor</code>, <code>roman army tactics</code>, or switch to <b>Search</b> mode and enter keywords.\n//             </div>\n//           )}\n//           {messages.map(m => (\n//             <ChatBubble key={m.id} role={m.role}>\n//               <ReactMarkdown remarkPlugins={[remarkGfm]}>{m.content}</ReactMarkdown>\n//             </ChatBubble>\n//           ))}\n//           {busy && <div className=\"text-slate-400 text-sm flex items-center gap-2\"><Spinner/> Working…</div>}\n//         </div>\n\n//         <form onSubmit={onSend} className=\"sticky bottom-4 mt-4 bg-slate-900/70 border border-slate-800 rounded-2xl p-2 flex items-center gap-2\">\n//           <input\n//             className=\"flex-1 bg-transparent outline-none px-3 py-2\"\n//             placeholder={mode==='summarize' ? \"Type a topic to summarize…\" : \"Type a query to search…\"}\n//             value={input}\n//             onChange={e=>setInput(e.target.value)}\n//           />\n//           <button className=\"bg-blue-600 hover:bg-blue-500 active:bg-blue-700 rounded-xl px-4 py-2\" disabled={busy}>\n//             {busy ? '...' : (mode==='summarize' ? 'Summarize' : 'Search')}\n//           </button>\n//         </form>\n\n//         <section className=\"mt-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\n//           <IngestCard\n//             urls={urls} setUrls={setUrls}\n//             tokens={tokens} setTokens={setTokens}\n//             overlap={overlap} setOverlap={setOverlap}\n//             force={force} setForce={setForce}\n//             runIngest={runIngest}\n//             out={ingestOut} busy={ingestBusy}\n//           />\n//           <ExamplesCard onPick={(q) => setInput(q)} />\n//         </section>\n//       </main>\n//     </div>\n//   )\n// }\n\n// function IngestCard(props: {\n//   urls: string; setUrls: (v:string)=>void;\n//   tokens: number; setTokens: (n:number)=>void;\n//   overlap: number; setOverlap: (n:number)=>void;\n//   force: boolean; setForce: (b:boolean)=>void;\n//   runIngest: () => void;\n//   out: any; busy: boolean;\n// }) {\n//   const { urls, setUrls, tokens, setTokens, overlap, setOverlap, force, setForce, runIngest, out, busy } = props\n//   return (\n//     <div className=\"bg-slate-900 border border-slate-800 rounded-2xl p-4\">\n//       <div className=\"font-semibold mb-2\">Ingest URLs</div>\n//       <textarea className=\"w-full bg-slate-950 border border-slate-800 rounded-lg p-2 h-24\" value={urls} onChange={e=>setUrls(e.target.value)} />\n//       <div className=\"flex flex-wrap gap-2 items-center mt-2 text-sm\">\n//         <label>tokens <input className=\"w-20 bg-slate-950 border border-slate-800 rounded px-2 py-1 ml-1\" type=\"number\" value={tokens} onChange={e=>setTokens(Number(e.target.value))}/></label>\n//         <label>overlap <input className=\"w-20 bg-slate-950 border border-slate-800 rounded px-2 py-1 ml-1\" type=\"number\" value={overlap} onChange={e=>setOverlap(Number(e.target.value))}/></label>\n//         <label className='flex items-center gap-2'><input type=\"checkbox\" checked={force} onChange={e=>setForce(e.target.checked)} /> force</label>\n//         <button onClick={runIngest} className=\"bg-emerald-600 hover:bg-emerald-500 rounded-lg px-3 py-1.5\" disabled={busy}>{busy?'…':'Ingest'}</button>\n//       </div>\n//       {out && <pre className=\"mt-3 text-xs bg-slate-950 border border-slate-800 rounded-lg p-2 whitespace-pre-wrap\">{JSON.stringify(out, null, 2)}</pre>}\n//     </div>\n//   )\n// }\n\n// function ExamplesCard({ onPick }: { onPick: (q: string) => void }) {\n//   const items = [\n//     'emperor',\n//     'roman army tactics',\n//     'history of microsoft',\n//     'Byzantine emperors',\n//   ]\n//   return (\n//     <div className=\"bg-slate-900 border border-slate-800 rounded-2xl p-4\">\n//       <div className=\"font-semibold mb-2\">Examples</div>\n//       <div className=\"grid grid-cols-2 gap-2 text-sm\">\n//         {items.map(x => (\n//           <button key={x} className=\"bg-slate-800 hover:bg-slate-700 rounded-lg px-3 py-2 text-left\" onClick={()=>onPick(x)}>{x}</button>\n//         ))}\n//       </div>\n//     </div>\n//   )\n// }\n\n\n'use client'\n\nimport { useEffect, useRef, useState } from 'react'\nimport { api } from '@/lib/api'\nimport Spinner from '@/components/Spinner'\nimport ChatBubble from '@/components/ChatBubble'\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\n\ntype Msg = { id: string; role: 'user'|'assistant'; content: string }\n\nexport default function Home() {\n  const [health, setHealth] = useState<string>('')\n  const [busy, setBusy] = useState<boolean>(false)\n\n  // Mode: search vs summarize\n  const [mode, setMode] = useState<'search'|'summarize'>('summarize')\n\n  // Model params (summarize only)\n  const [model, setModel] = useState('llama3:8b')\n  const [k, setK] = useState(8)\n  const [temperature, setTemperature] = useState(0.1)\n  const [maxTokens, setMaxTokens] = useState(500)\n\n  // Ingest panel state\n  const [urls, setUrls] = useState('https://www.iana.org/domains/reserved')\n  const [tokens, setTokens] = useState(500)\n  const [overlap, setOverlap] = useState(100)\n  const [force, setForce] = useState(false)\n  const [ingestOut, setIngestOut] = useState<any>(null)\n  const [ingestBusy, setIngestBusy] = useState(false)\n\n  const [messages, setMessages] = useState<Msg[]>([])\n  const [input, setInput] = useState('emperor')\n  const scroller = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const h = await api.health()\n        setHealth(`OK (${h.env}, model: ${h.model})`)\n      } catch (e:any) {\n        setHealth(`Error: ${e.message}`)\n      }\n    })()\n  }, [])\n\n  useEffect(() => {\n    scroller.current?.scrollTo({ top: scroller.current.scrollHeight, behavior: 'smooth' })\n  }, [messages])\n\n  async function onSend(e?: React.FormEvent) {\n    e?.preventDefault()\n    if (!input.trim() || busy) return\n\n    const text = input.trim()\n    setMessages(m => [...m, { id: crypto.randomUUID(), role: 'user', content: text }])\n    setInput('')\n    setBusy(true)\n\n    try {\n      if (mode === 'summarize') {\n        const res = await api.summarize(text, { k, model, temperature, max_tokens: maxTokens })\n        setMessages(m => [...m, { id: crypto.randomUUID(), role: 'assistant', content: `**Summary** *(model: ${res.model})*\\n\\n${res.summary}` }])\n      } else {\n        const res = await api.search(text, 5)\n        const md = [\n          `**Search Results for:** ${res.query}`,\n          ...res.results.map((r, i) => {\n            // r.citation: \"(URL:start-end)\" → extract URL\n            const url = r.citation?.match(/\\((.+?):\\d+-\\d+\\)/)?.[1] ?? r?.meta?.source ?? '#'\n            return `**${i+1}.** ${r.text}\\n\\n> [${r.citation}](${url})`\n          })\n        ].join('\\n\\n')\n        setMessages(m => [...m, { id: crypto.randomUUID(), role: 'assistant', content: md }])\n      }\n    } catch (e:any) {\n      setMessages(m => [...m, { id: crypto.randomUUID(), role: 'assistant', content: `❌ ${e.message}` }])\n    } finally {\n      setBusy(false)\n    }\n  }\n\n  async function runIngest() {\n    setIngestBusy(true); setIngestOut(null)\n    try {\n      const list = urls.split('\\n').map(s=>s.trim()).filter(Boolean)\n      const res = await api.ingest(list, tokens, overlap, force)\n      setIngestOut(res)\n    } catch (e:any) {\n      setIngestOut({ error: e.message })\n    } finally {\n      setIngestBusy(false)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-950 text-slate-100\">\n      <header className=\"sticky top-0 z-10 border-b border-slate-800 bg-slate-950/80 backdrop-blur-md\">\n        <div className=\"max-w-5xl mx-auto px-4 py-3 flex items-center justify-between\">\n          <div>\n            <div className=\"font-bold\">Production-Grade AI — RAG (Next.js)</div>\n            <div className=\"text-xs text-slate-400\">\n              API: {process.env.NEXT_PUBLIC_API_BASE} • Health: <span className=\"text-emerald-400\">{health}</span>\n            </div>\n          </div>\n          <div className=\"hidden md:flex items-center gap-3\">\n            <div className=\"flex items-center bg-slate-900 border border-slate-700 rounded-lg overflow-hidden\">\n              <button\n                className={`px-3 py-1 text-sm ${mode==='search'?'bg-slate-800':''}`}\n                onClick={()=>setMode('search')}\n                disabled={busy}\n              >Search</button>\n              <button\n                className={`px-3 py-1 text-sm ${mode==='summarize'?'bg-slate-800':''}`}\n                onClick={()=>setMode('summarize')}\n                disabled={busy}\n              >Summarize</button>\n            </div>\n\n            {/* Summarize-only controls */}\n            {mode==='summarize' && (\n              <>\n                <select className=\"bg-slate-900 border border-slate-700 rounded-lg px-2 py-1\" value={model} onChange={e=>setModel(e.target.value)}>\n                  <option>llama3:8b</option>\n                  <option>qwen2.5:3b-instruct</option>\n                </select>\n                <label className=\"text-xs\">k <input className=\"w-14 ml-1 bg-slate-900 border border-slate-700 rounded px-2 py-1\" type=\"number\" value={k} onChange={e=>setK(Number(e.target.value))}/></label>\n                <label className=\"text-xs\">temp <input className=\"w-20 ml-1 bg-slate-900 border border-slate-700 rounded px-2 py-1\" type=\"number\" step={0.1} min={0} max={1} value={temperature} onChange={e=>setTemperature(Number(e.target.value))}/></label>\n                <label className=\"text-xs\">max <input className=\"w-20 ml-1 bg-slate-900 border border-slate-700 rounded px-2 py-1\" type=\"number\" value={maxTokens} onChange={e=>setMaxTokens(Number(e.target.value))}/></label>\n              </>\n            )}\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-5xl mx-auto px-4\">\n        <div className=\"mt-4 text-sm text-slate-400\">\n          {mode==='summarize'\n            ? 'Type a topic to generate a cited summary from your indexed sources.'\n            : 'Type a query to search semantically across your indexed sources.'}\n        </div>\n\n        <div ref={scroller} className=\"mt-3 h-[62vh] md:h-[66vh] overflow-y-auto space-y-3 pr-1\">\n          {messages.length === 0 && (\n            <div className=\"text-slate-400 text-sm\">\n              Try <code>emperor</code>, <code>roman army tactics</code>, or switch to <b>Search</b> mode and enter keywords.\n            </div>\n          )}\n          {messages.map(m => (\n            <ChatBubble key={m.id} role={m.role}>\n              <ReactMarkdown remarkPlugins={[remarkGfm]}>{m.content}</ReactMarkdown>\n            </ChatBubble>\n          ))}\n          {busy && <div className=\"text-slate-400 text-sm flex items-center gap-2\"><Spinner/> Working…</div>}\n        </div>\n\n        <form onSubmit={onSend} className=\"sticky bottom-4 mt-4 bg-slate-900/70 border border-slate-800 rounded-2xl p-2 flex items-center gap-2\">\n          <input\n            className=\"flex-1 bg-transparent outline-none px-3 py-2\"\n            placeholder={mode==='summarize' ? \"Type a topic to summarize…\" : \"Type a query to search…\"}\n            value={input}\n            onChange={e=>setInput(e.target.value)}\n          />\n          <button className=\"bg-blue-600 hover:bg-blue-500 active:bg-blue-700 rounded-xl px-4 py-2\" disabled={busy}>\n            {busy ? '...' : (mode==='summarize' ? 'Summarize' : 'Search')}\n          </button>\n        </form>\n\n        <section className=\"mt-6 grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <IngestCard\n            urls={urls} setUrls={setUrls}\n            tokens={tokens} setTokens={setTokens}\n            overlap={overlap} setOverlap={setOverlap}\n            force={force} setForce={setForce}\n            runIngest={runIngest}\n            out={ingestOut} busy={ingestBusy}\n          />\n          <ExamplesCard onPick={(q) => setInput(q)} />\n        </section>\n      </main>\n    </div>\n  )\n}\n\nfunction IngestCard(props: {\n  urls: string; setUrls: (v:string)=>void;\n  tokens: number; setTokens: (n:number)=>void;\n  overlap: number; setOverlap: (n:number)=>void;\n  force: boolean; setForce: (b:boolean)=>void;\n  runIngest: () => void;\n  out: any; busy: boolean;\n}) {\n  const { urls, setUrls, tokens, setTokens, overlap, setOverlap, force, setForce, runIngest, out, busy } = props\n  return (\n    <div className=\"bg-slate-900 border border-slate-800 rounded-2xl p-4\">\n      <div className=\"font-semibold mb-2\">Ingest URLs</div>\n      <textarea className=\"w-full bg-slate-950 border border-slate-800 rounded-lg p-2 h-24\" value={urls} onChange={e=>setUrls(e.target.value)} />\n      <div className=\"flex flex-wrap gap-2 items-center mt-2 text-sm\">\n        <label>tokens <input className=\"w-20 bg-slate-950 border border-slate-800 rounded px-2 py-1 ml-1\" type=\"number\" value={tokens} onChange={e=>setTokens(Number(e.target.value))}/></label>\n        <label>overlap <input className=\"w-20 bg-slate-950 border border-slate-800 rounded px-2 py-1 ml-1\" type=\"number\" value={overlap} onChange={e=>setOverlap(Number(e.target.value))}/></label>\n        <label className='flex items-center gap-2'><input type=\"checkbox\" checked={force} onChange={e=>setForce(e.target.checked)} /> force</label>\n        <button onClick={runIngest} className=\"bg-emerald-600 hover:bg-emerald-500 rounded-lg px-3 py-1.5\" disabled={busy}>{busy?'…':'Ingest'}</button>\n      </div>\n      {out && <pre className=\"mt-3 text-xs bg-slate-950 border border-slate-800 rounded-lg p-2 whitespace-pre-wrap\">{JSON.stringify(out, null, 2)}</pre>}\n    </div>\n  )\n}\n\nfunction ExamplesCard({ onPick }: { onPick: (q: string) => void }) {\n  const [items, setItems] = useState<string[]>([])\n  const [loading, setLoading] = useState(true)\n  const [err, setErr] = useState<string | null>(null)\n\n  useEffect(() => {\n    let mounted = true\n    api.examples(6)\n      .then((res) => {\n        if (!mounted) return\n        setItems(res.examples ?? [])\n        setErr(null)\n      })\n      .catch((e: any) => {\n        if (!mounted) return\n        setErr(e.message || 'Failed to load examples')\n        setItems(['emperor', 'roman army tactics', 'history of microsoft']) // fallback\n      })\n      .finally(() => mounted && setLoading(false))\n    return () => { mounted = false }\n  }, [])\n\n  return (\n    <div className=\"bg-slate-900 border border-slate-800 rounded-2xl p-4\">\n      <div className=\"font-semibold mb-2\">Examples</div>\n      {loading && <div className=\"text-sm text-slate-400\">Loading…</div>}\n      {err && <div className=\"text-sm text-red-400 mb-2\">⚠ {err}</div>}\n      {!loading && (\n        <div className=\"grid grid-cols-2 gap-2 text-sm\">\n          {items.map((x) => (\n            <button\n              key={x}\n              className=\"bg-slate-800 hover:bg-slate-700 rounded-lg px-3 py-2 text-left\"\n              onClick={() => onPick(x)}\n              title={x}\n            >\n              {x}\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}"],"names":[],"mappings":"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","debugId":null}}]
}